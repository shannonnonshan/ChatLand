generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  password  String
  email     String   @unique
  createdAt DateTime @default(now())

  // Chat-related
  messages     Message[]
  participants Participant[]

  // Social features
  posts        Post[]
  friendshipsA Friendship[] @relation("friendsA")
  friendshipsB Friendship[] @relation("friendsB")

  avatar   String?
  bio      String?
  role     String?
  online   Boolean   @default(false)
  lastSeen DateTime?
}

model Conversation {
  id           Int           @id @default(autoincrement())
  name         String?
  isGroup      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  messages     Message[]
  participants Participant[]
}

model Participant {
  id             Int      @id @default(autoincrement())
  userId         Int
  conversationId Int
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  createdAt      DateTime @default(now())
  senderId       Int
  conversationId Int

  sender       User         @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

// ðŸ‘‡ Added models for social network features

model Post {
  id          Int      @id @default(autoincrement())
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userAId   Int
  userBId   Int
  createdAt DateTime @default(now())

  userA User @relation("friendsA", fields: [userAId], references: [id], onDelete: Cascade)
  userB User @relation("friendsB", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
  @@index([userAId])
  @@index([userBId])
}
